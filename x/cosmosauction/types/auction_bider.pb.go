// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmosauction/cosmosauction/auction_bider.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuctionBider struct {
	Index   string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Auction uint64 `protobuf:"varint,2,opt,name=auction,proto3" json:"auction,omitempty"`
	Bidder  string `protobuf:"bytes,3,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount  uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AuctionBider) Reset()         { *m = AuctionBider{} }
func (m *AuctionBider) String() string { return proto.CompactTextString(m) }
func (*AuctionBider) ProtoMessage()    {}
func (*AuctionBider) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0180d377dd3a86d, []int{0}
}
func (m *AuctionBider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionBider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionBider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionBider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionBider.Merge(m, src)
}
func (m *AuctionBider) XXX_Size() int {
	return m.Size()
}
func (m *AuctionBider) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionBider.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionBider proto.InternalMessageInfo

func (m *AuctionBider) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *AuctionBider) GetAuction() uint64 {
	if m != nil {
		return m.Auction
	}
	return 0
}

func (m *AuctionBider) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *AuctionBider) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*AuctionBider)(nil), "naruto0913.cosmosauction.cosmosauction.AuctionBider")
}

func init() {
	proto.RegisterFile("cosmosauction/cosmosauction/auction_bider.proto", fileDescriptor_a0180d377dd3a86d)
}

var fileDescriptor_a0180d377dd3a86d = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4f, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0x4e, 0x2c, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x43, 0xe3, 0x41, 0xe9, 0xf8, 0xa4, 0xcc,
	0x94, 0xd4, 0x22, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xb5, 0xbc, 0xc4, 0xa2, 0xd2, 0x92,
	0x7c, 0x03, 0x4b, 0x43, 0x63, 0x3d, 0x14, 0xd5, 0xa8, 0x3c, 0xa5, 0x3c, 0x2e, 0x1e, 0x47, 0x08,
	0xd3, 0x09, 0xa4, 0x5b, 0x48, 0x84, 0x8b, 0x35, 0x33, 0x2f, 0x25, 0xb5, 0x42, 0x82, 0x51, 0x81,
	0x51, 0x83, 0x33, 0x08, 0xc2, 0x11, 0x92, 0xe0, 0x62, 0x87, 0x6a, 0x90, 0x60, 0x52, 0x60, 0xd4,
	0x60, 0x09, 0x82, 0x71, 0x85, 0xc4, 0xb8, 0xd8, 0x92, 0x32, 0x53, 0x52, 0x52, 0x8b, 0x24, 0x98,
	0xc1, 0x1a, 0xa0, 0x3c, 0x90, 0x78, 0x62, 0x6e, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0x0b, 0x58, 0x03,
	0x94, 0xe7, 0x14, 0x72, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x56, 0xe9,
	0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x08, 0xc7, 0x43, 0xbd, 0xaa, 0x0b,
	0xf3, 0x6b, 0x05, 0x9a, 0xdf, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x9e, 0x36, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x9d, 0x9a, 0x28, 0x27, 0x01, 0x00, 0x00,
}

func (m *AuctionBider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionBider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionBider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintAuctionBider(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuctionBider(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Auction != 0 {
		i = encodeVarintAuctionBider(dAtA, i, uint64(m.Auction))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintAuctionBider(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuctionBider(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuctionBider(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuctionBider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovAuctionBider(uint64(l))
	}
	if m.Auction != 0 {
		n += 1 + sovAuctionBider(uint64(m.Auction))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuctionBider(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovAuctionBider(uint64(m.Amount))
	}
	return n
}

func sovAuctionBider(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuctionBider(x uint64) (n int) {
	return sovAuctionBider(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuctionBider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuctionBider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionBider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionBider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionBider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionBider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionBider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			m.Auction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionBider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Auction |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionBider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionBider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionBider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionBider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuctionBider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuctionBider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuctionBider(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuctionBider
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuctionBider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuctionBider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuctionBider
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuctionBider
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuctionBider
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuctionBider        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuctionBider          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuctionBider = fmt.Errorf("proto: unexpected end of group")
)
